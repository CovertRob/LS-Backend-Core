#!/usr/bin/env python3

from contextlib import contextmanager
import psycopg2
import sys
from psycopg2 import extras
from textwrap import dedent
from datetime import date

class ExpenseData:
    
    def __init__(self):
        if not self.check_table_exists():
            self._setup_schema()

    def _display_expenses(self, result):
        for expense in result:
            columns = [
                str(expense["id"]).rjust(3),
                str(expense["created_on"]),
                str(expense["amount"]).rjust(12),
                str(expense["memo"])
            ]
            print(" | ".join(columns))

    def list_expenses(self):
        with self._database_connect("expenses") as connection:
            with connection.cursor(cursor_factory=extras.DictCursor) as cursor:
                    cursor.execute("SELECT * FROM expenses ORDER BY created_on ASC")
                    result = cursor.fetchall()

        self._display_count(len(result))
        self._display_expenses(result)
        if len(result) > 1:
            self._display_total(result)

    def delete_expense(self, idnum):
        with self._database_connect("expenses") as connection:
            with connection.cursor(cursor_factory=extras.DictCursor) as cursor:
                cursor.execute("SELECT * FROM expenses WHERE id = %s", (idnum,))
                result = cursor.fetchone()
                if result:
                    cursor.execute("DELETE FROM expenses WHERE id = %s", (idnum,))
                    print("The following expense has been deleted:")
                    self._display_expenses([result])
                else:
                    print(f"There is no expense with id '{idnum}'.")
    

    def add_expense(self, args):
        with  self._database_connect("expenses") as connection:
            with connection.cursor() as cursor:
                    cursor.execute("INSERT INTO expenses (amount, memo, created_on) VALUES (%s, %s, %s)", (args[2], args[3], date.today()))

    def search_expenses(self, search_item: str):
        with self._database_connect("expenses") as connection:
            with connection.cursor(cursor_factory=extras.DictCursor) as cursor:
                cursor.execute("SELECT id, created_on, amount, memo FROM expenses WHERE memo ILIKE %s", (search_item,))
                result = cursor.fetchall()
        self._display_count(len(result))
        self._display_expenses(result)
        if len(result) > 1:
            self._display_total(result)

    def delete_all_expenses(self):
        with self._database_connect("expenses") as connection:
            with connection.cursor(cursor_factory=extras.DictCursor) as cursor:
                cursor.execute("DELETE FROM expenses")

    @contextmanager
    def _database_connect(self, database: str):
        connection = psycopg2.connect(dbname=database)
        try:
            with connection:
                yield connection
        finally:
            connection.close()

    def _display_count(self, count):
        if count == 0:
            print("There are no expenses.")
        elif count == 1:
            print("There is 1 expense.")
        else:
            print(f"There are {count} expenses.")

    def _display_total(self, expenses):
        amount_sum = sum([expense["amount"] for expense in expenses])
        print("-" * 50)
        print(f"Total {str(round(amount_sum, 2)).rjust(25)}")

    def _setup_schema(self):
        with self._database_connect("expenses") as connection:
            with connection.cursor() as cursor:
                cursor.execute("""CREATE TABLE expenses (
                                id serial PRIMARY KEY,
                                amount numeric(6, 2) NOT NULL CHECK (amount >= 0.01), memo text NOT NULL,
                                created_on date NOT NULL)""")
    def check_table_exists(self):
        with self._database_connect("expenses") as connection:
            with connection.cursor() as cursor:
                cursor.execute("""
                                SELECT COUNT(*) FROM information_schema.tables
                                WHERE table_schema = %s AND table_name = %s""", ("public", "expenses"))
                result = cursor.fetchall()
        return bool(result[0][0])

class CLI:

    def __init__(self, args: list):
        self._expense_handler = ExpenseData()
        self._args = args
        self.run()

    def display_help(self):
        print(dedent("""
            An expense recording system

            Commands:

            add AMOUNT MEMO [DATE] - record a new expense
            clear - delete all expenses
            list - list all expenses
            delete NUMBER - remove expense with id NUMBER
            search QUERY - list expenses with a matching memo field
            """).strip("\n"))


    def run(self):
        if len(self._args) == 1:
            self.display_help()
        elif self._args[1] == 'list':
            self._expense_handler.list_expenses()
        elif self._args[1] == 'add': 
            if len(self._args) == 4:
                self._expense_handler.add_expense(self._args)
            else:
                print("You must provide an amount and memo.")
        elif self._args[1] == 'search':
            if len(self._args) == 3:
                self._expense_handler.search_expenses(self._args[2])
            else:
                print("You must provide an item to search for.")
        elif self._args[1] == 'delete':
            if len(self._args) == 3:
                self._expense_handler.delete_expense(self._args[2])
            else:
                print("You must provide an expense ID")
        elif self._args[1] == 'clear':
            print("This will remove all expenses. Are you sure? (y/n)")
            response = input().strip()
            if response.lower() == 'y':
                self._expense_handler.delete_all_expenses()
                print("All expenses have been deleted.")
                
if __name__ == '__main__':
    program = CLI(sys.argv)

